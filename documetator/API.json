{
  "total": 4,
  "components": [
    {
      "moduleName": "Tab",
      "filePath": "Tab.svelte",
      "props": [
        {
          "name": "class",
          "kind": "let",
          "description": "Custom CSS class to add to the `c-tabs__tab` base class for custom styling purposes",
          "type": "string",
          "value": "''",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectedClass",
          "kind": "let",
          "description": "The CSS class that will be added when `Tab` becomes selected. *Default value from `Tabs.selectedTabClass`*",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "disabled",
          "kind": "let",
          "description": "Disable `Tab` for pointer, but it's possible to select tab by function `Tabs.selectTab(index)`. *Default `undefined`*",
          "type": "boolean | undefined",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{ index: any, id: any }"
        }
      ],
      "events": [],
      "typedefs": [],
      "componentComment": "\nThis is a child component for `TabList`\n@order 20\n\n```tsx\n<Tab>A</Tab>\n```"
    },
    {
      "moduleName": "TabList",
      "filePath": "List.svelte",
      "props": [
        {
          "name": "class",
          "kind": "let",
          "description": "Custom CSS class to add to the `c-tabs__tablist` base class for custom styling purposes",
          "type": "string",
          "value": "''",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "componentComment": "\n@order 10\nThis is a child component for `Tabs` and a container for many `Tab` components\n\n```tsx\n<TabList>\n  <Tab>A</Tab>\n  <Tab>B</Tab>\n</TabList>\n```"
    },
    {
      "moduleName": "TabPanel",
      "filePath": "Panel.svelte",
      "props": [
        {
          "name": "class",
          "kind": "let",
          "description": "Custom CSS class to add to the `c-tabs__tabpanel` base class for custom styling purposes",
          "type": "string",
          "value": "''",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hiddenClass",
          "kind": "let",
          "description": "The CSS class that will be added when `TabPanel` becomes **unselected**. *Default value from `Tabs.hiddenPanelClass`*",
          "type": "string",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "slot_props": "{ index: any, tabId: any, panelId: any }"
        }
      ],
      "events": [],
      "typedefs": [],
      "componentComment": "\n@order 30\nThis is a child component for `Tabs` and a container for tab body\n\n```tsx\n<Tabs>\n  <TabList><Tab>A</Tab><Tab>B</Tab></TabList>\n  <TabPanel>A</TabPanel>\n  <TabPanel>B</TabPanel>\n</Tabs>\n```"
    },
    {
      "moduleName": "Tabs",
      "filePath": "Tabs.svelte",
      "props": [
        {
          "name": "class",
          "kind": "let",
          "description": "Custom CSS class to add to the `c-tabs` base class for custom styling purposes",
          "type": "string",
          "value": "''",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectedTabClass",
          "kind": "let",
          "description": "The CSS class that will be added to the child `Tab` component when it becomes selected",
          "type": "string",
          "value": "'active'",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "hiddenPanelClass",
          "kind": "let",
          "description": "The CSS class for the **unselected** TabPanel. Applies when `mode = hide`. More in the `mode` prop",
          "type": "string",
          "value": "''",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "mode",
          "kind": "let",
          "description": "`TabPanel` hiding and showing mode.\n\n`remove`: The panel will be removed from the DOM.\n`hide`: the panel will be hidden by the style from the `hiddenPanelClass` CSS class, or if `hiddenPanelClass` is not specified with the style `display: none`",
          "type": "\"remove\" | \"hide\"",
          "value": "'hide'",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "selectedIndex",
          "kind": "const",
          "description": "Index of selected `Tab` component\n```js\nlet selectedIndex;\ntabsRef.selectedIndex.subscrive(\n  (index) => selectedIndex = index\n);\n```\n```js\nlet selectedIndex = tabsRef.selectedIndex;\n$: if ($selectedIndex === 0) {\n  console.log('First tab selected');\n}\n```",
          "type": "Readable<number>",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": true,
          "reactive": false
        },
        {
          "name": "selectTab",
          "kind": "const",
          "description": "Select `Tab` component by index. Allows arguments for `Array.prototype.at(number)`\n```js\n// Select first Tab\ntabsRef.selectTab(0);\n// Select last Tab\ntabsRef.selectTab(-1);\n```",
          "type": "(number) => void",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": true,
          "reactive": false
        }
      ],
      "moduleExports": [],
      "slots": [{ "name": "__default__", "default": true, "slot_props": "{}" }],
      "events": [],
      "typedefs": [],
      "componentComment": "\n@order 0\nThis is the root component. It's a container for one `TabList` and many `TabPanel`\n```tsx\n<Tabs>\n  <TabList>\n    <Tab>A</Tab>\n    <Tab>B</Tab>\n  </TabList>\n  <TabPanel>A</TabPanel>\n  <TabPanel>B</TabPanel>\n</Tabs>\n```\n\nChild components of `Tabs` have access to the context by `contextName`\n```ts\nexport type TabId = symbol;\nexport type PanelId = symbol;\nexport type TabsMode = 'remove' | 'hide';\nexport interface TabsContext {\n\tmode: TabsMode;\n\tregisterTab: () => TabId;\n\tregisterPanel: () => PanelId;\n\tselectTab: (tab: TabId | number) => void;\n\tselectedTab: Writable<symbol | null>;\n\tselectedPanel: Writable<symbol | null>;\n\tselectedIndex: Readable<number>;\n\tselectedTabClass: string;\n\thiddenPanelClass: string;\n}\nexport const contextName = Symbol('TABS');\n```\n\nSimple style. Source `style.css`\n```css\n.c-tabs .c-tabs__tablist {\n  display: flex;\n  border-bottom: 2px solid silver;\n  margin-bottom: 1em;\n}\n.c-tabs .c-tabs__tab {\n  box-sizing: border-box;\n  border: none;\n  background-color: transparent;\n  font-size: 1.25em;\n  padding: 0.25em 0.5em;\n  position: relative;\n  top: 3px;\n}\n.c-tabs .c-tabs__tab.active {\n  background-color: silver;\n  border-bottom: 4px solid gray;\n}\n```"
    }
  ]
}
